version: '3.7'

services:
  
  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV}
      args:
        APP_ENV: ${APP_ENV}
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4000
    depends_on:
      - mongo
      - redis
    networks:
      - app-network
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      NODE_ENV: development

  mongo:
    image: mongo:latest
    container_name: mongodb
    command: mongod --bind_ip_all --quiet
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ADMIN_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ADMIN_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE_NAME}
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongod.conf:/etc/mongod.conf
      - mongodb_logs:/var/log/mongodb
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    environment:
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGODB_ADMIN_USERNAME}:${MONGODB_ADMIN_PASSWORD}@mongodb:${MONGODB_PORT}/
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_ADMIN_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_ADMIN_PASSWORD}
      # - ME_CONFIG_SITE_COOKIESECRET=${COOKIE_SECRET}
      # - ME_CONFIG_SITE_SESSIONSECRET=${SESSION_SECRET}

    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - ${REDIS_PORT}
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  redis-commander:
    container_name: redis_commander
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: app-network:redis:${REDIS_PORT}
    ports:
      - "${REDIS_UI_PORT}:8081"
    depends_on:
      - redis
    networks:
      - app-network
    
  port_forwarding:
    container_name: port_forwarding
    image: nginx
    ports:
      - "${API_PORT}:80"
    volumes:
        - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        # - ./certbot/www:/var/www/certbot
        # - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - app-network

  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./certbot/www:/var/www/certbot
  #     - ./certbot/conf:/etc/letsencrypt
  #   command: certonly --webroot -w /var/www/certbot
  #   restart: unless-stopped
    

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    name: mongodb_data
  mongodb_logs:
  redis_data:
    driver: local
  node_modules:
  